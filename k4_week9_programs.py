# -*- coding: utf-8 -*-
"""K4_Week9_Programs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GXbJgHa9AnquTzda9SqIYBrZLe-WgRBJ

Name: P Ajay Rahul Prasad

Roll No: 20131A05K4

9) Object Oriented Programming: basic

a) Write a Python class named Person with attributes name, age, weight (kgs), height (ft) and takes them through the constructor and exposes a method get_bmi_result() which returns one of "underweight", "healthy", "obese"
"""

class person:
  def __init__(self,name,age,weight,height):
    self.name=name
    self.age=age
    self.weight=weight
    self.height=height
  def get_bmi_result(self):
    bmi=(self.weight)/((self.height/3.281)**2)
    if bmi<18.5:
      str='Underweight'
    elif bmi>18.5 and bmi<25:
      str='healthy'
    else:
      str='obese'
    return str

obj=person("Harsha",25,65,5.6)
print(obj.get_bmi_result())
o2=person("sri",18,35,5.1)
print(o2.get_bmi_result())
o3=person("Steve",21,80,5.3)
print(o3.get_bmi_result())

"""b) Write a python program to demonstrate various kinds of inheritance."""

#single
class Person:            
        def __init__(self, name, rollnum):   
                self.name = name
                self.rollnum = rollnum
        def display(self):
                print(self.name)
                print(self.rollnum)
  
class Student( Person ):           
        def __init__(self, name, rollnum, Branch, section):
                self.Branch = Branch
                self.section = section
                Person.__init__(self, name, rollnum) 
  
a = Student('Rahul', '20131A05K4', 'CSE', 4)
a.display()

#multiple
class parent1:
    def __init__(self):
        self.str1 = "Multiple"
        print("parent1")
  
class parent2:
    def __init__(self):
        self.str2 = "Inheritence"        
        print("parent2")
  
class child(parent1, parent2):
    def __init__(self):
        parent1.__init__(self)
        parent2.__init__(self)
        print("child")
          
    def printStrs(self):
        print(self.str1, self.str2)
         
  
ob = child()
ob.printStrs()

#multilevel
class parent:
    def __init__(self, name):
        self.name = name
    def getName(self):
        return self.name

class Child(parent):
    def __init__(self, name, age):
        parent.__init__(self, name)
        self.age = age
    def getAge(self):
        return self.age
  
class GrandChild(Child):
    def __init__(self, name, age, address):
        Child.__init__(self, name, age)
        self.address = address
    def getAddress(self):
        return self.address        

g = GrandChild("Beluga", 18, "Delhi")  
print(g.getName(), g.getAge(), g.getAddress())

# Hierarchical inheritance

class Parent:
	def func1(self):
		print("This function is in parent class.")
  
class Child1(Parent):
	def func2(self):
		print("This function is in child 1.")

class Child2(Parent):
	def func3(self):
		print("This function is in child 2.")

object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3()

# hybrid inheritance
class School:
	def func1(self):
		print("This function is in school.")

class Student1(School):
	def func2(self):
		print("This function is in student 1. ")

class Student2(Student1, School):
	def func4(self):
		print("This function is in student 3.")

object = Student2()
object.func1()
object.func2()